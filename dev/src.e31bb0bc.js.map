{"version":3,"sources":["../node_modules/plax/js/plax.js","create-snow.js","create-stars.js","index.js"],"names":["$sky","$","skyHeight","innerHeight","skyWidth","innerWidth","numberOfSnow","i","prependTo","numberOfStars","starSize","Math","floor","random","starTop","starLeft","css","width","height","top","left","plaxify","xRange","yRange","plax","enable"],"mappings":"AAAA,ACAA,ACAA,IDAMA,ACAAA,IDAI,ACAA,GDAGC,ACAAA,CDAC,ACAA,CDAC,ACAA,QDAD,ACAA,CDAd,ACAA;AFCA,ACCA,ACAA,IDAMC,ACAAA,SDAS,ACAA,GDAGF,ACAAA,IDAI,ACAA,CDACG,ACAAA,WDAL,ACAA,EDAlB,ACAA;AFAA,ACAA,ACAA,ACFA,IFGIC,ACAAA,QDAQ,ACAA,GDAGJ,ACAAA,IDAI,ACAA,CDACK,ACAAA,UDAL,ACAA,EDDf,ACAA;AFCA,ACCA,ACAA,IDAMC,ACAAG,YDAY,CCAC,EDAGL,CCACA,ODAO,CCAC,EDAEF,CCACA,QDAb,CCAC,EDAwB,CCAC,GDA/C,ECAA;AFAA,AGHA;AHIA,ACAA,ACAA,KDAK,ACAA,IDAIK,ACAAA,CDAC,ACAA,GDAG,ACAA,CDAb,ACAA,EDAgBA,ACAAA,CDAC,ACAA,GDAGD,ACAAG,YDApB,CCAA,CDAkCF,CAAC,ACAAA,CAAC,CDApC,CCAA,CDAuC,CCAC;AFCxC,ACAIN,ACAA,ACJJ,EFIIA,CAAC,CAAC,ECAIS,QAAQ,GAAGC,IAAI,CAACC,EDArB,CAAD,CAAwBJ,CCAP,CAAWG,IAAI,CAACE,EDAjC,CAAkCb,GCAN,CDA5B,ICA4C,CAAhB,GAAoB,CAA/B,CAAjB;AFCJ,ACAC,ACDG,MACIc,OAAO,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBX,SAA3B,CADd;AFEJ,AEFI,ACFJD,CAAC,CAAC,IDIMc,QAAQ,CCJf,CAAD,CDImBJ,ACJFU,IDIM,CAACT,ECJxB,CAAyB,EDIN,CAAWD,IAAI,CAACE,MAAL,KAAgBT,QAA3B,CAFf;AFGJ,AEAIH,ACLuBqB,EDKvBrB,ACLuBqB,CDKtB,CAAC,ICL2B,EAAE,EAAV,YDKpB,CAAD,CACKN,GADL,CACS;AFAb,AECYC,ACP2BM,EAAAA,EDO3BN,ICPiC,CDO5B,CCP8B,CDO5BP,QADN;AFCb,AECYQ,ACRa,CAAzB,GDQYA,MAAM,EAAER,QAFP;AFEb,AECYS,ACPZlB,CAAC,CAACuB,EDOUL,ECPZ,CDOe,ACPRM,EDOUX,ICPjB,GDIa;AFGb,AECYM,IAAAA,IAAI,EAAEL;AFAlB,AEJa,GADT,EAOKP,SAPL,CAOeR,IAPffile":"src.e31bb0bc.js","sourceRoot":"../src","sourcesContent":["/* Plax version 1.2.1 */\n\n/*\n  Copyright (c) 2011 Cameron McEfee\n\n  Permission is hereby granted, free of charge, to any person obtaining\n  a copy of this software and associated documentation files (the\n  \"Software\"), to deal in the Software without restriction, including\n  without limitation the rights to use, copy, modify, merge, publish,\n  distribute, sublicense, and/or sell copies of the Software, and to\n  permit persons to whom the Software is furnished to do so, subject to\n  the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n(function ($) {\n\n  var maxfps          = 25,\n      delay           = 1 / maxfps * 1000,\n      lastRender      = new Date().getTime(),\n      layers          = [],\n      docWidth        = $(window).width(),\n      docHeight       = $(window).height(),\n      motionEnabled   = false,\n      motionMax       = 1,\n      motionAllowance = .05,\n      movementCycles  = 0,\n      motionData      = {\n        \"xArray\"  : [0,0,0,0,0],\n        \"yArray\"  : [0,0,0,0,0],\n        \"xMotion\" : 0,\n        \"yMotion\" : 0\n      }\n\n  $(window).resize(function() {\n      docWidth  = $(window).width()\n      docHeight = $(window).height()\n  })\n\n  // Public Methods\n  $.fn.plaxify = function (params){\n\n    return this.each(function () {\n      var layerExistsAt = -1\n      var layer         = {\"xRange\":0,\"yRange\":0,\"invert\":false}\n\n      for (var i=0;i<layers.length;i++){\n        if ($(this).attr('id') == layers[i].obj.attr('id')){\n          layerExistsAt = i\n        }\n      }\n\n      for (var param in params) {\n        if (layer[param] == 0) {\n          layer[param] = params[param]\n        }\n      }\n\n      // Add an object to the list of things to parallax\n      layer.obj    = $(this)\n      layer.startX = this.offsetLeft\n      layer.startY = this.offsetTop\n\n      if(layer.invert == false){\n        layer.startX -= Math.floor(layer.xRange/2)\n        layer.startY -= Math.floor(layer.yRange/2)\n      } else {\n        layer.startX += Math.floor(layer.xRange/2)\n        layer.startY += Math.floor(layer.yRange/2)\n      }\n      if(layerExistsAt >= 0){\n        layers.splice(layerExistsAt,1,layer)\n      } else {\n        layers.push(layer)\n      }\n      \n    })\n  }\n\n\n  // Get minimum value of an array\n  //\n  // arr - array to be tested\n  //\n  // returns the smallest value in the array\n\n  function getMin(arr){\n    return Math.min.apply({}, arr)\n  }\n\n\n  // Get maximum value of an array\n  //\n  // arr - array to be tested\n  //\n  // returns the largest value in the array\n\n  function getMax(arr){\n    return Math.max.apply({}, arr)\n  }\n\n\n  // Determine if the device has an accelerometer\n\n  function moveable(){\n    return window.DeviceMotionEvent != undefined\n  }\n\n\n  // Determine if the device is actually moving. If it is, enable motion based parallaxing.\n  // Otherwise, use the mouse to parallax\n  //\n  // e - devicemotion event\n  \n  function detectMotion(e){\n    if (new Date().getTime() < lastRender + delay) return\n\n    if(moveable()){\n      var accel= e.accelerationIncludingGravity,\n          x = accel.x,\n          y = accel.y\n      if(motionData.xArray.length >= 5){\n        motionData.xArray.shift()\n      }\n      if(motionData.yArray.length >= 5){\n        motionData.yArray.shift()\n      }\n      motionData.xArray.push(x)\n      motionData.yArray.push(y)\n\n      motionData.xMotion = Math.round((getMax(motionData.xArray) - getMin(motionData.xArray))*1000)/1000\n      motionData.yMotion = Math.round((getMax(motionData.yArray) - getMin(motionData.yArray))*1000)/1000\n\n      if((motionData.xMotion > 1.5 || motionData.yMotion > 1.5)) {\n        if(motionMax!=10){\n          motionMax = 10\n        }\n      }\n\n      // test for sustained motion\n      if(motionData.xMotion > motionAllowance || motionData.yMotion > motionAllowance){\n        movementCycles++;\n      } else {\n        movementCycles = 0;\n      }\n\n      if(movementCycles >= 5){\n        motionEnabled = true\n        $(document).unbind('mousemove.plax')\n        //window.ondevicemotion = function(e){plaxifier(e)}\n\n        $(window).bind('devicemotion', plaxifier(e))\n      } else {\n        motionEnabled = false\n        $(window).unbind('devicemotion')\n        $(document).bind('mousemove.plax', function (e) {\n          plaxifier(e)\n        })\n      }\n    }\n  }\n\n\n  // Move the elements in the `layers` array within their ranges, \n  // based on mouse or motion input \n  //\n  // e - mousemove or devicemotion event\n\n  function plaxifier(e) {\n    if (new Date().getTime() < lastRender + delay) return\n      lastRender = new Date().getTime()\n\n    var x = e.pageX,\n        y = e.pageY\n\n    if(motionEnabled == true){\n          // portrait(%2==0) or landscape\n      var i = window.orientation ? (window.orientation + 180) % 360 / 90 : 2,\n          accel= e.accelerationIncludingGravity,\n          tmp_x = i%2==0 ? -accel.x : accel.y,\n          tmp_y = i%2==0 ? accel.y : accel.x\n      // facing up(>=2) or down\n      x = i>=2 ? tmp_x : -tmp_x\n      y = i>=2 ? tmp_y : -tmp_y\n\n      // change value from a range of -x to x => 0 to 1\n      x = (x+motionMax)/2\n      y = (y+motionMax)/2\n      \n      // keep values within range\n      if(x < 0 ){\n        x = 0\n      } else if( x > motionMax ) {\n        x = motionMax\n      }\n\n      if(y < 0 ){\n        y = 0\n      } else if( y > motionMax ) {\n        y = motionMax\n      }\n\n    }\n\n    var hRatio = x/((motionEnabled == true) ? motionMax : docWidth),\n        vRatio = y/((motionEnabled == true) ? motionMax : docHeight),\n        layer, i\n\n    for (i = layers.length; i--;) {\n      layer = layers[i]\n      if (layer.invert != true) {\n        layer.obj\n          .css('left',layer.startX + (layer.xRange*hRatio))\n          .css('top', layer.startY + (layer.yRange*vRatio))\n      } else {\n        layer.obj\n          .css('left',layer.startX - (layer.xRange*hRatio))\n          .css('top', layer.startY - (layer.yRange*vRatio))\n      }\n    }\n  }\n\n  $.plax = {\n    // Activeate Plax\n    enable: function(){\n      $(document).bind('mousemove.plax', function (e) {\n        plaxifier(e)\n      })\n\n      if(moveable()){\n        window.ondevicemotion = function(e){detectMotion(e)}\n      }\n\n    },\n    // Deactiveate Plax\n    disable: function(){\n      $(document).unbind('mousemove.plax')\n      window.ondevicemotion = undefined\n    }\n  }\n\n  if (typeof ender !== 'undefined') {\n    $.ender($.fn, true)\n  }\n\n})(function () {\n  return typeof jQuery !== 'undefined' ? jQuery : ender\n}())\n","const $sky = $(\".stars\");\n\nconst skyHeight = $sky.innerHeight(),\n    skyWidth = $sky.innerWidth();\nconst numberOfSnow = (skyWidth * skyHeight) / 1000;\nfor (let i = 0; i < numberOfSnow; i++) {\n    $('<div class=\"snow\">').prependTo($sky);\n}\n","const $sky = $(\".stars\");\n\nconst skyHeight = $sky.innerHeight(),\n    skyWidth = $sky.innerWidth();\nconst numberOfStars = (skyWidth * skyHeight) / 10000;\nfor (let i = 0; i < numberOfStars; i++) {\n    const starSize = Math.floor(Math.random() * 8 + 2),\n        starTop = Math.floor(Math.random() * skyHeight),\n        starLeft = Math.floor(Math.random() * skyWidth);\n    $('<div class=\"star\">')\n        .css({\n            width: starSize,\n            height: starSize,\n            top: starTop,\n            left: starLeft,\n        })\n        .prependTo($sky);\n}\n","import \"plax\";\nimport \"./create-snow\";\nimport \"./create-stars\";\n\n$(\".js-plaxify\").plaxify({ xRange: 20, yRange: 20 });\n\n$.plax.enable();\n"]}